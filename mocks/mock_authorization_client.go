// Code generated by MockGen. DO NOT EDIT.
// Source: ./mocks/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armauthorization "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/authorization/armauthorization/v3"
	gomock "github.com/golang/mock/gomock"
)

// MockRoleAssignmentsClientInterface is a mock of RoleAssignmentsClientInterface interface.
type MockRoleAssignmentsClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRoleAssignmentsClientInterfaceMockRecorder
}

// MockRoleAssignmentsClientInterfaceMockRecorder is the mock recorder for MockRoleAssignmentsClientInterface.
type MockRoleAssignmentsClientInterfaceMockRecorder struct {
	mock *MockRoleAssignmentsClientInterface
}

// NewMockRoleAssignmentsClientInterface creates a new mock instance.
func NewMockRoleAssignmentsClientInterface(ctrl *gomock.Controller) *MockRoleAssignmentsClientInterface {
	mock := &MockRoleAssignmentsClientInterface{ctrl: ctrl}
	mock.recorder = &MockRoleAssignmentsClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleAssignmentsClientInterface) EXPECT() *MockRoleAssignmentsClientInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRoleAssignmentsClientInterface) Create(ctx context.Context, scope, roleAssignmentName string, parameters armauthorization.RoleAssignmentCreateParameters, options *armauthorization.RoleAssignmentsClientCreateOptions) (armauthorization.RoleAssignmentsClientCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, scope, roleAssignmentName, parameters, options)
	ret0, _ := ret[0].(armauthorization.RoleAssignmentsClientCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRoleAssignmentsClientInterfaceMockRecorder) Create(ctx, scope, roleAssignmentName, parameters, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoleAssignmentsClientInterface)(nil).Create), ctx, scope, roleAssignmentName, parameters, options)
}

// Delete mocks base method.
func (m *MockRoleAssignmentsClientInterface) Delete(ctx context.Context, scope, roleAssignmentName string, options *armauthorization.RoleAssignmentsClientDeleteOptions) (armauthorization.RoleAssignmentsClientDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, scope, roleAssignmentName, options)
	ret0, _ := ret[0].(armauthorization.RoleAssignmentsClientDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRoleAssignmentsClientInterfaceMockRecorder) Delete(ctx, scope, roleAssignmentName, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoleAssignmentsClientInterface)(nil).Delete), ctx, scope, roleAssignmentName, options)
}
